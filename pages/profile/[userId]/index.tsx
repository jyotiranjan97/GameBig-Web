import { useRouter } from 'next/router';
import Image from 'next/image';
import Head from 'next/head';
import Button from '@material-ui/core/Button';
import CakeIcon from '@material-ui/icons/Cake';
import SmartphoneIcon from '@material-ui/icons/Smartphone';
import EmailIcon from '@material-ui/icons/Email';
import LocationOnIcon from '@material-ui/icons/LocationOn';
import { useAuth } from '../../../context/authContext';
import { db } from '../../../firebase/config';
import styles from '../../../styles/Home.module.scss';
import Twitch from '../../../assets/Icons/Twitch';
import YouTube from '../../../assets/Icons/YouTube';
import Instagram from '../../../assets/Icons/Instagram';
import Facebook from '../../../assets/Icons/Facebook';
import Twitter from '../../../assets/Icons/Twitter';
import Reddit from '../../../assets/Icons/Reddit';
import Aux from '../../../hoc/Auxiliary/Auxiliary';

export default function Home({ userData }) {
  const router = useRouter();
  const { signout } = useAuth();
  return (
    <Aux>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.FlexColumn}>
        <img
          src={userData.photoURL}
          width={100}
          height={100}
          alt="Picture of the user"
        />
        {userData.displayName ? <h1>{userData.displayName}</h1> : null}
        {userData.dob ? (
          <div className={styles.FlexRow}>
            <CakeIcon />
            <h4>{userData.dob}</h4>
          </div>
        ) : null}

        {userData.country ? (
          <div className={styles.FlexRow}>
            <LocationOnIcon />
            <h4>{userData.country}</h4>
          </div>
        ) : null}
        {userData.phoneNumber ? (
          <div className={styles.FlexRow}>
            <SmartphoneIcon />
            <h4>{userData.phoneNumber}</h4>
          </div>
        ) : null}
        {userData.email ? (
          <div className={styles.FlexRow}>
            <EmailIcon />
            <h4>{userData.email}</h4>
          </div>
        ) : null}
        <div className={styles.FlexRow}>
          {userData.twitchLink ? (
            <Twitch
              size={30}
              onClick={() => window.open(userData.twitchLink, '_blank')}
            />
          ) : null}
          {userData.youtubeLink ? (
            <YouTube
              size={30}
              onClick={() => window.open(userData.youtubeLink, '_blank')}
            />
          ) : null}
          {userData.instagramLink ? (
            <Instagram
              size={30}
              onClick={() => window.open(userData.instagramLink, '_blank')}
            />
          ) : null}
          {userData.facebookLink ? (
            <Facebook
              size={30}
              onClick={() => window.open(userData.facebookLink, '_blank')}
            />
          ) : null}
          {userData.twitterLink ? (
            <Twitter
              size={30}
              onClick={() => window.open(userData.twitterLink, '_blank')}
            />
          ) : null}
          {userData.redditLink ? (
            <Reddit
              size={30}
              onClick={() => window.open(userData.redditLink, '_blank')}
            />
          ) : null}
        </div>
        <Button
          variant="contained"
          color="primary"
          onClick={() =>
            // router.push(`/profile/${userData.uid}/edit`)
            router.push({
              pathname: `/profile/${userData.uid}/edit`,
              query: userData,
            })
          }
        >
          Edit Profile
        </Button>
        <h4 onClick={signout}>Sign Out</h4>
      </div>
    </Aux>
  );
}

export async function getStaticPaths() {
  return {
    fallback: true,
    paths: [
      {
        params: {
          userId: 'Sdo3A6hPTUfQ63SaSqYMGyrqx093',
        },
      },
    ],
  };
}

export async function getStaticProps(context: { params: { userId: string } }) {
  const userId = context.params.userId;
  let userData = null;
  await db
    .collection('users')
    .doc(userId)
    .get()
    .then((doc) => {
      userData = doc.data();
    })
    .catch((error) => {
      console.log('Error getting cached document:', error);
    });
  return {
    props: { userData },
    revalidate: 10,
  };
}
