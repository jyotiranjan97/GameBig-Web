import { useState, useEffect } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { Formik } from 'formik';
import { Button, TextField } from '@material-ui/core';
import Autocomplete from '@material-ui/lab/Autocomplete';
import MuiPhoneNumber from 'material-ui-phone-number';
import { db } from '../../../firebase/config';
import { countries } from '../../../utilities/CountryData';
import { useAuth } from '../../../context/authContext';
import styles from '../../../styles/Home.module.scss';
import { UserData } from '../../../utilities/types';
import Aux from '../../../hoc/Auxiliary/Auxiliary';

const emptyInitialValues = {
  displayName: '',
  dob: '',
  country: '',
  phoneNumber: '',
  email: '',
  youtubeLink: '',
  twitchLink: '',
  facebookLink: '',
  instagramLink: '',
  twitterLink: '',
  redditLink: '',
};

export default function Home(props) {
  const router = useRouter();

  const saveUserData = async (uid: string, userData: UserData) => {
    try {
      await db.collection('users').doc(uid).update(userData);
    } catch (err) {
      console.log('err', err);
    } finally {
      router.push('/profile');
    }
  };

  return (
    <Aux>
      <Head>
        <title>Edit Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.FlexColumn}>
        <h1>Edit Profile</h1>
        <Formik
          initialValues={{ ...emptyInitialValues, ...props.userdata }}
          // validate={(values) => {
          //   const errors = {};
          //   if (!values.email) {
          //     errors.email = 'Required';
          //   } else if (
          //     !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(values.email)
          //   ) {
          //     errors.email = 'Invalid email address';
          //   }
          //   return errors;
          // }}
          onSubmit={(values, { resetForm, setSubmitting }) => {
            saveUserData(props.userData.uid, values);
            resetForm();
          }}
        >
          {({
            values,
            errors,
            touched,
            handleChange,
            handleBlur,
            handleSubmit,
            isSubmitting,
            /* and other goodies */
          }) => (
            <form className={styles.FlexColumn} onSubmit={handleSubmit}>
              <TextField
                type="text"
                name="displayName"
                label="Name"
                variant="outlined"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.displayName}
              />
              {errors.displayName && touched.displayName && errors.displayName}
              <TextField
                id="dob"
                label="Birthday"
                type="date"
                defaultValue="2017-05-24"
                variant="outlined"
                InputLabelProps={{
                  shrink: true,
                }}
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.dob}
              />
              {errors.dob && touched.dob && errors.dob}
              <Autocomplete
                id="combo-box-demo"
                options={countries}
                getOptionLabel={(option) => option.name}
                style={{ width: 300 }}
                renderInput={(params) => (
                  <TextField {...params} label="Country" variant="outlined" />
                )}
              />
              {errors.country && touched.country && errors.country}
              <MuiPhoneNumber
                type="tel"
                id="phone"
                name="phone"
                defaultCountry={'us'}
                variant="outlined"
                onChange={handleChange}
                label="Phone Number"
                onBlur={handleBlur}
                value={values.phoneNumber}
              />
              {errors.phoneNumber && touched.phoneNumber && errors.phoneNumber}
              <TextField
                type="email"
                name="email"
                label="Email"
                variant="outlined"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.email}
              />
              {errors.email && touched.email && errors.email}
              <TextField
                type="url"
                name="youtubeLink"
                label="Youtube Link"
                variant="outlined"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.youtubeLink}
              />
              {errors.youtubeLink && touched.youtubeLink && errors.youtubeLink}
              <TextField
                type="url"
                name="twitchLink"
                label="Twitch Link"
                variant="outlined"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.twitchLink}
              />
              {errors.twitchLink && touched.twitchLink && errors.twitchLink}
              <TextField
                type="url"
                name="facebookLink"
                label="Facebook Link"
                variant="outlined"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.facebookLink}
              />
              {errors.facebookLink &&
                touched.facebookLink &&
                errors.facebookLink}
              <TextField
                type="url"
                name="instagramLink"
                label="Instagram Link"
                variant="outlined"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.instagramLink}
              />
              {errors.instagramLink &&
                touched.instagramLink &&
                errors.instagramLink}
              <TextField
                type="url"
                name="twitterLink"
                label="Twitter Link"
                variant="outlined"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.twitterLink}
              />
              {errors.twitterLink && touched.twitterLink && errors.twitterLink}
              <TextField
                type="url"
                name="redditLink"
                label="Reddit Link"
                variant="outlined"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.redditLink}
              />
              {errors.redditLink && touched.redditLink && errors.redditLink}
              <Button
                type="submit"
                variant="contained"
                color="primary"
                disabled={isSubmitting}
              >
                Save
              </Button>
            </form>
          )}
        </Formik>
        <Button variant="contained" onClick={() => router.push('/profile')}>
          Cancel
        </Button>
      </div>
    </Aux>
  );
}

export async function getStaticProps(context) {
  const { userData } = context.req;
  console.log(context.req);

  return {
    props: { userData },
    revalidate: 10,
  };
}
