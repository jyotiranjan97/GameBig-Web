import { useState } from 'react';
import Head from 'next/head';
import {
  Button,
  createStyles,
  makeStyles,
  Theme,
  TextField,
  Typography,
} from '@material-ui/core';
import Backdrop from '@material-ui/core/Backdrop';
import CreateTeam from '../../../components/Profile/createTeam';
import { db } from '../../../firebase/firebaseClient';
import Aux from '../../../hoc/Auxiliary/Auxiliary';
import { UserData, TeamType } from '../../../utilities/types';
import TeamIntro from '../../../components/Profile/TeamIntro';
import TeamItem from '../../../components/Profile/TeamItem';
import ProfileHeader from '../../../components/Profile/ProfileHeader';
import getUser from '../../../lib/getUser';

const useStyles = makeStyles((theme: Theme) =>
  createStyles({
    backdrop: {
      zIndex: theme.zIndex.drawer + 1,
      width: '100%',
      background: theme.palette.background.paper,
      display: 'flex',
      flexDirection: 'column',
    },
  })
);

export default function Home({
  userData,
  teams,
}: {
  userData: UserData;
  teams: Array<TeamType>;
}) {
  const classes = useStyles();
  const [open, setOpen] = useState(false);
  const [currentTeams, setCurrentTeams] = useState(teams);
  const [selectedTeam, setSelectedTeam] = useState<TeamType | undefined>(
    undefined
  );
  const closeBackdrop = () => {
    setOpen(false);
  };
  const openBackdrop = () => {
    setOpen(true);
  };

  const removeTeam = (docId: string) => {
    const temp = currentTeams.filter((item) => {
      return docId !== item.docId;
    });
    setCurrentTeams(temp);
  };

  return (
    <Aux>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="manifest" href="/manifest.json" />
      </Head>
      <div>
        <ProfileHeader userData={userData} />
        {currentTeams.length !== 0 ? (
          currentTeams.map((team, index) => {
            return (
              <TeamItem
                team={team}
                key={index}
                openBackdrop={openBackdrop}
                setSelectedTeam={setSelectedTeam}
                removeTeam={removeTeam}
              />
            );
          })
        ) : (
          <TeamIntro openBackdrop={openBackdrop} />
        )}
        <Backdrop className={classes.backdrop} open={open}>
          <CreateTeam teamData={selectedTeam} onCancel={closeBackdrop} />
        </Backdrop>
      </div>
    </Aux>
  );
}

export async function getServerSideProps(context: {
  params: { username: string };
}) {
  const { username } = context.params;
  const userData = await getUser(username);

  const teams: Array<TeamType> = [];

  await db
    .collection('teams')
    .where('gamers', 'array-contains-any', [username])
    .get()
    .then((querySnapshot) => {
      querySnapshot.forEach((doc) => {
        const { teamName, gamers, inGameLead } = doc.data();
        teams.push({ teamName, gamers, inGameLead, docId: doc.id });
      });
    })
    .catch((error) => {
      console.log('Error getting documents: ', error);
    });

  return {
    props: { userData, teams },
  };
}
